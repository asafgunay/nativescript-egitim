"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const transformers_1 = require("@ngtools/webpack/src/transformers");
const ns_replace_bootstrap_1 = require("./ns-replace-bootstrap");
describe('@ngtools/webpack transformers', () => {
    describe('replace_bootstrap', () => {
        it('should replace bootstrap', () => {
            const input = core_1.tags.stripIndent `
        import { platformNativeScriptDynamic } from "nativescript-angular/platform";
        import { AppModule } from "./app.module";

        platformNativeScriptDynamic().bootstrapModule(AppModule);
      `;
            const output = core_1.tags.stripIndent `
        import * as __NgCli_bootstrap_1 from "nativescript-angular/platform-static";
        import * as __NgCli_bootstrap_2 from "./app/app.module.ngfactory";

        __NgCli_bootstrap_1.platformNativeScript().bootstrapModuleFactory(__NgCli_bootstrap_2.AppModuleNgFactory);
      `;
            const { program, compilerHost } = transformers_1.createTypescriptContext(input);
            const ngCompiler = {
                typeChecker: program.getTypeChecker(),
                entryModule: {
                    path: '/project/src/app/app.module',
                    className: 'AppModule',
                },
            };
            const transformer = ns_replace_bootstrap_1.nsReplaceBootstrap(() => ngCompiler);
            const result = transformers_1.transformTypescript(undefined, [transformer], program, compilerHost);
            expect(core_1.tags.oneLine `${result}`).toEqual(core_1.tags.oneLine `${output}`);
        });
        it('should replace bootstrap when barrel files are used', () => {
            const input = core_1.tags.stripIndent `
        import { platformNativeScriptDynamic } from "nativescript-angular/platform";
        import { AppModule } from './app';

        platformNativeScriptDynamic().bootstrapModule(AppModule);
      `;
            const output = core_1.tags.stripIndent `
        import * as __NgCli_bootstrap_1 from "nativescript-angular/platform-static";
        import * as __NgCli_bootstrap_2 from "./app/app.module.ngfactory";

        __NgCli_bootstrap_1.platformNativeScript().bootstrapModuleFactory(__NgCli_bootstrap_2.AppModuleNgFactory);
      `;
            const { program, compilerHost } = transformers_1.createTypescriptContext(input);
            const ngCompiler = {
                typeChecker: program.getTypeChecker(),
                entryModule: {
                    path: '/project/src/app/app.module',
                    className: 'AppModule',
                },
            };
            const transformer = ns_replace_bootstrap_1.nsReplaceBootstrap(() => ngCompiler);
            const result = transformers_1.transformTypescript(undefined, [transformer], program, compilerHost);
            expect(core_1.tags.oneLine `${result}`).toEqual(core_1.tags.oneLine `${output}`);
        });
        it('should always import platform nativescript first', () => {
            const input = core_1.tags.stripIndent `
        import { platformNativeScriptDynamic } from "nativescript-angular/platform";
        import { AppModule } from "./app.module";
        import "./shared/kinvey.common";

        platformNativeScriptDynamic().bootstrapModule(AppModule);
      `;
            const output = core_1.tags.stripIndent `
        import * as __NgCli_bootstrap_1 from "nativescript-angular/platform-static";
        import * as __NgCli_bootstrap_2 from "./app/app.module.ngfactory";
        import "./shared/kinvey.common";

        __NgCli_bootstrap_1.platformNativeScript().bootstrapModuleFactory(__NgCli_bootstrap_2.AppModuleNgFactory);
      `;
            const { program, compilerHost } = transformers_1.createTypescriptContext(input);
            const ngCompiler = {
                typeChecker: program.getTypeChecker(),
                entryModule: {
                    path: '/project/src/app/app.module',
                    className: 'AppModule',
                },
            };
            const transformer = ns_replace_bootstrap_1.nsReplaceBootstrap(() => ngCompiler);
            const result = transformers_1.transformTypescript(undefined, [transformer], program, compilerHost);
            expect(core_1.tags.oneLine `${result}`).toEqual(core_1.tags.oneLine `${output}`);
        });
    });
});
//# sourceMappingURL=ns-replace-bootstrap.spec.js.map